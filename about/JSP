По сути Java Server Page или JSP представляет собой html-код с вкраплениями кода Java. В то же время станицы jsp - это
не стандартные html-страницы. Когда приходит запрос к определенной странице JSP, то сервер обрабатывает ее, генерирует
из нее код html и отправляет его клиенту. В итоге пользователь после обращения к странице JSP видит в своем браузере
обычную html-страницу.
Как и обычные статические веб-страницы, файлы JSP необходимо размещать на веб-сервере, к которому обычные пользователи
могут обращаться по протоколу http, например, набирая в адресной строке браузера нужный адрес. Однако чтобы сервер мог
обрабатывать файлы JSP, он должен использовать движок JSP (JSP engine), который также называют JSP-контейнером.
Есть множество движков JSP, и все они реализуют одну и ту же спецификацию и в целом работают одинаково. Однако тем не
менее при переносе кода с одного веб-сервера на другой могут потребоваться небольшие изменения.

maven dependency <!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api -->


ОСНОВЫ СИНТАКСИСА JSP - first.jsp
Содержимое страницы JSP фактически делится на код html (а также css/javascript) и код на языке java.
Для вставки кода Java на страницу JSP можно использовать пять основных элементов:
Одна строка - <%=  %>
Много строк - <% %>
Методы - <%! %>
Импорт - <%@ page import="java.util.Data" %>

Выражения JSP (JSP Expression)
JSP Expression представляет выражение, заключенное между тегами <%= и %>.
При обращении к JSP вычисляется значение этого выражения.
<%=  %>

Скриплет JSP (JSP Scriplet)
JSP Scriplet представляет одну или несколько строк на языке Java.
<%
	код Java
%>

Объявления JSP (JSP Declaration)
JSP Declaration позволяют определить метод, который мы затем можем вызывать в скриплетах или в JSP-выражениях.
Определение метода помещается между тегами <%! и %>. Например, определим следующую JSP-страницу:
<%!
	int square(int n){
		return n * n;
	}
%>

Директивы JSP (JSP Directive)
Директивы предназначены для установки условий, которые применяются ко всей странице JSP. Наиболее используемая
директива - это директива page. Например, с помощью атрибута import этой директивы мы можем импортировать
пакеты или отдельные классы на страницу jsp.
<%@ page import="java.util.Data" %>

Комментарии JSP
<%-- Текст_комментария --%>



МАППИНГ
Не мапь в web.xml ЭТО Ужас!!!
Просто обращайся по имени jsp
http://localhost:8084/LearnJavaEEAtMetanit_war_exploded/first.jsp



ВЛОЖЕНИЕ JSP ТРАНИЦ
<jsp:include page="page.html" /> в body



Получение данных из строки запроса
second.jsp
http://localhost:8084/LearnJavaEEAtMetanit_war_exploded/second.jsp?name=Bob&age=89

Из форм
third.jsp
fourth.jsp



Передача данных из сервлета в jsp
Сервлет принимает запрос и отвечает файлом jsp
JSPServlet
five.jsp

Нередко страница jsp обрабатывает запрос вместе сервлетом. В этом случае сервлет определяет логику,
а jsp - визуальную часть. И при обработке запроса сервлет может перенаправить дальнейшую обработку странице jsp.
Есть несколько способов передачи данных из сервлета в jsp, которые заключаются в использовании определенного
контекста или scope. Есть несколько контекстов для передачи данных:

request (контекст запроса): данные сохраняются в HttpServletRequest

session (контекст сессии): данные сохраняются в HttpSession

application (контекст приложения): данные сохраняются в ServletContext

Данные из контекста запроса доступны только в пределах текущего запроса. Данные из контекста сессии доступны только в
пределах текущего сеанса. А данные из контекста приложения доступны постоянно, пока работает приложение.
Но вне зависимости от выбранного способа передача данных осуществляется с помощью метода setAttribute(name, value),
где name - строковое название данных, а value - сами данные, которые могут представлять различные данные.



Expression Language (EL)
Expression Language или сокращенно EL предоставляет компактный синтаксис для обращения к массивам, коллекциям,
объектам и их свойствам внутри страницы jsp. Он довольн прост. Вставку окрывает знак $, затем в фигурные скобки {}
заключается выводимое значение:

${attribute}
${object.property}

Поиск данных
Откуда эти данные берутся? EL пытается найти значения для этих данных во всех доступных контекстах.
И EL просматривает все эти контексты в следующем порядке:

Контекст страницы (данные сохраняются в PageContext)

Контекст запроса

Контекст сессии

Контекст приложения

<p>Name: ${name}</p>

Однако может сложиться ситуация, что сразу в нескольких контекстах одновременно содержатся данные с одним и тем
же именем, например, "name". Соответственно EL будет получать данные в порядке просмотра контекстов. Но, возможно,
нам захочется выводить данные из какого-то определенного контекста. В этом случае перед названием данных мы можем
указать название контекста: pageScope, requestScope, sessionScope или applicationScope. Например:
${requestScope.name}

По умолчанию Expression Language предоставляет ряд встроенных объектов, которые позволяют использовать различные
аспекты запроса:

param: объект, который хранит все переданные странице параметры

paramValues: хранит массив значений для определенного параметра (если для параметра передается сразу несколько значений)

header: хранит все заголовки запроса

headerValues: предоставляет массив значений для определенного заголовка запроса

cookie: предоставляет доступ к отправленным в запросе кукам

initParam: возвращает значение для определенного параметра из элемента context-param из файла web.xml

pageContext: предоставляет доступ к объекту PageContext, который представляет контекст текущей страницы jsp



JSTL (JSP Standard Tag Library)
JSP по умолчанию позволяет встраивать код на java в разметку html. Однако иногда использование стандартных способов
для ряда операций, например, для ывод на страницу элементов из списка и т.д., может быть несколько громоздким.
Чтобы упростить встраивание кода java в JSP была разработана специальная библиотека - JSTL.
JSTL (JSP Standard Tag Library) предоставляет теги для базовых задач JSP (цикл, условные выражения и т.д.)
Эта библиотека не является частью инфраструктуры Java EE, поэтому ее необходимо добавлять в проект самостоятельно.
<!-- https://mvnrepository.com/artifact/jstl/jstl -->

Несмотря на то, что JSTL часто называется библиотекой, на самом деле она содержит ряд библиотек:

Core: содержит основные теги для наиболее распространенных задач.

Использует префикс "c" и uri "http://java.sun.com/jsp/jstl/core"

Formatting: предоставляет теги для форматирования чисел, дат, времени.

Использует префикс "fmt" и uri "http://java.sun.com/jsp/jstl/fmt"

SQL: предоставляет теги для sql-запросами и источниками данных.

Использует префикс "sql" и uri "http://java.sun.com/jsp/jstl/sql"

XML: предоставляет теги для работы с xml.

Использует префикс "x" и uri "http://java.sun.com/jsp/jstl/xml"

Functions: предоставляет функции для работы со строками.

Использует префикс "fn" и uri "http://java.sun.com/jsp/jstl/functions"

Для подключения функционала этих библиотек на страницу jsp применяется директива taglib. Например,
подключения основной библиотеки:
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

Защита от внедрения кода
Стандартный синтаксис EL не позволяет нам экранировать теги. Например, допустим, в сервлете в jsp передается
некоторый текст, который содержит код html:

Основные возможности JSTL
Цикл
<c:forEach var="user" items="${users}">
	<p>${user}</p>
</c:forEach>

Условные выражения
<c:if test="${isVisible == true}">
	<p>Visible</p>
</c:if>

Тег choose
Тег c:choose подобно конструкции switch...case в Java проверяет объект на соответствие одному из значений.
<c:choose>
    <c:when test="${val == 1}">
    	<p>Equals to 1</p>
    </c:when>
    <c:when test="${val == 2}">
    	<p>Equals to 2</p>
    </c:when>
    <c:otherwise>
    	<p>Undefined</p>
    </c:otherwise>
    </c:choose>

    Тег url
    ВОТ И ГЕНЕРАЦИЯ КРАСИВЫХ УРЛОВ
    Тег <c:url> позволяет создать адрес относительно корня приложения. Этот тег может применяться, например,
    при создании ссылок.

Редирект
С помощью тега redirect можно установить редирект на другой адрес. Например, в случае если атрибут val не определен,
то делаем редирект на страницу "notfound.jsp":

<c:if test="${val == null}">
	<c:redirect url="/notfound.jsp" />
</c:if>



JSTL подключение
File -> Project Structure -> Artifact и в левом Листе ищем наш jstl -> Двойной клик и Apply. Готово!



JAVA BEAN
Класс для бизнес логики в Java EE

Класс Java Bean должен соответствовать ряду ограничений:

иметь конструктор, который не принимает никаких параметров

определять для всех свойств, которые используются в jsp, методы геттеры и сеттеры

названия геттеров и сеттеров должны соответствовать условностям: перед именем переменной добавляется get (для геттера)
и set (для сеттера), а название переменной включается с большой буквы. Например, если переменная называется firstName,
то функции геттера и сеттера должны называться соответственно getFirstName и setFirstName.

Однако для переменных типа boolean для функции геттера используется вместо get приставка is. Например,
переменная enabled и геттер isEnabled.

реализовать интерфейс Serializable или Externalizable
