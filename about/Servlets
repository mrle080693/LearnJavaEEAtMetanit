Сервлет представляет специальный тип классов Java,
который выполняется на веб-сервере и который обрабатывает запросы и возвращает результат обработки.
Сессия создается на стороне сервера с целью хранения информации посещения. Сессия может использовать куки
если они разрешены на стороне клиента.



Создание
Создаем Класс
public class com.mrle.learnjavaeeatmetanit.servlet.FirstServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter printWriter = response.getWriter();
        printWriter.write("Hello ))");
    }
}
Указываем класс сервлета и делаем маппинг в web.xml
    <servlet>
        <servlet-name>com.mrle.learnjavaeeatmetanit.servlet.FirstServlet</servlet-name>
        <servlet-class>com.mrle.learnjavaeeatmetanit.servlet.FirstServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>com.mrle.learnjavaeeatmetanit.servlet.FirstServlet</servlet-name>
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>
Адрес запроса
http://localhost:8084/LearnJavaEEAtMetanit_war_exploded/first
Маппинг с помощью аннотаций
web.xml не трогаем, а просто аннотируем класс сервлета
@WebServlet("/second")
http://localhost:8084/LearnJavaEEAtMetanit_war_exploded/second

Исключения в обоих случаях можно не пробрасывать, а обрабатывать внутри класса сервлета try, catch, finally



Сервлет - это класс, который расширяет функциональность класса HttpServlet и запускается внутри контейнера сервлетов.
Сервлет размещается на сервере, однако чтобы сервер мог использовать сервлет для обработки запросов,
сервер должен поддерживать движок или контейнер сервлетов (servlet container/engine).
Например, Apache Tomcat по сути является контейнером сервлетов,
поэтому он может использовать сервлеты для обслуживания запросов.

Для обработки запроса в HttpServlet определен ряд методов, которые мы можем переопределить в классе сервлета:

doGet: обрабатывает запросы GET (получение данных)

doPost: обрабатывает запросы POST (отправка данных)

doPut: обрабатывает запросы PUT (отправка данных для изменения)

doDelete: обрабатывает запросы DELETE (удаление данных)

doHead: обрабатывает запросы HEAD

Каждый метод обрабатывает определенный тип запросов HTTP, и мы можем определить все эти методы,
но, зачастую, работа идет в основном с методами doGet и doPost. Например, определение методов без реализации:
Все методы в качестве параметра принимают два объекта:
HttpServletRequest - хранит информацию о запросе и HttpServletResponse - управляет ответом на запрос.



Жизненный цикл сервлета
init(создание) -> service(Обработка запросов) -> destroy(Уничтожение).
Методы жизненного цикла могут быть переопределены.
Поскольку для обработки всех запросов создается один экземпляр сервлета,
и все обращения к нему идут в отдельных потоках, то не рекомендуется в классе сервлета объявлять и использовать
глобальные переменные, так как они не будут потокобезопасными.



Получение данных в сервлете com.mrle.learnjavaeeatmetanit.servlet.FirstServlet, com.mrle.learnjavaeeatmetanit.servlet.SecondServlet(mapped using annotations)
В методы doGet и doPost сервлета, которые обрабатывают запрос, в качестве одного из параметров передается объект
HttpServletRequest, с помощью которого можно получить отправленные сервлету данные, то есть параметры запроса.
Для этого в классе HttpServletRequest определены два метода:

getParameter(String param): возвращает значение определенного параметра, название которого передается в метод.
Если указанного параметра в запросе нет, то возвращается значение null.

getParameterValues(String param): возвращает массив значений, который представляет определенный параметр.
Если указанного параметра в запросе нет, то возвращается значение null.

Получение данных из строки запроса com.mrle.learnjavaeeatmetanit.servlet.ThirdServlet
Передавать значения в сервлет можно различными способами. При отправке GET-запроса значения передаются через
строку запроса. Стандартный get-запрос принимает примерно следующую форму:
название_ресурса?параметр1=значение1&параметр2=значение2.

Передача массивов com.mrle.learnjavaeeatmetanit.servlet.FourthServlet
Если в сервлет передается массив значений, то для его получения у объекта HttpServletRequest применяется метод
getParameterValues(), который получает название параметра и возвращает массив строк.

Получение данных из форм
from index.jsp
to com.mrle.learnjavaeeatmetanit.servlet.FiveServlet



Перенаправление запроса
Метод forward() класса RequestDispatcher позволяет перенаправить запрос из сервлета на другой сервлет,
html-страницу или страницу jsp. Причем в данном случае речь идет о перенаправлении запроса, а не о переадресации.
from com.mrle.learnjavaeeatmetanit.servlet.SixServlet
if id is null to index.jsp
else return "Hello id" + id



Параметры инициализации сервлетов
com.mrle.learnjavaeeatmetanit.servlet.SevenServlet, web.xml



ОБРАБОТКА ОШИБОК, ИСКЛЮЧЕНИЙ
Обработка стандартных ошибок http протокола
web.xml
404.jsp

Обработка Java исключений
needs <!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api -->
web.xml
exception.jsp
com.mrle.learnjavaeeatmetanit.servlet.EighthServlet



КУКИ
Куки представляют простейший способо хранения данных приложения.
Куки хранятся в браузере польвователя в виде пары ключ-значение:
с каждым уникальным ключом сопоставлется определенное значение. По ключу мы можем получить сохраненное в куках значение.
Приложение на сервере может устанавливать куки и отправлять в ответе пользователю, после чего куки сохраняются в
браузере. Когда клиент отправляет запроск приложению, то в запросе также отправляются и те куки, которые установленны
данным приложением.

Куки могут быть двух типов. Одни куки хранятся только в течении сеанса. То есть когда пользователь закрывает вкладку
браузера и прекращает работать с приложением, то куки сеанса уничтожаются. Второй тип куков - постоянные куки -
хранятся в течение продолжительного времени (до 3 лет).

Следует учитывать некоторые ограничения. Прежде всего куки нередко ограничены по размеру (обычно не более 4 килобайт).
Кроме того, обычно браузеры принимают не более 20 кук с одного сайта. Более того, в некоторых браузерах может быть
отключена поддержка кук.

Для работы с куками сервлеты могут используют класс javax.servlet.http.Cookie. Для создания куки надо создать объект
этого класса с помощью констуктора Cookie(String name, String value), где name - ключ, а value - значение, которое
сохраняется в куках. Стоит отметить, что мы можем сохранить в куках только строки.

Чтобы добавить куки в ответ клиенту у объекта HttpServletResponse применяется метод addCookie(Cookie c)

При создании куки мы можем использовать ряд методов объекта Cookie для установки и получения отдельных параметров:

setMaxAge(int maxAgeInSeconds): устанавливает время в секундах, в течение которого будут существовать куки.
Специальное значение -1 указывает, что куки будут существовать только в течение сессии и после закрытия браузера
будут удалены.

setValue(String value): устанавливает хранимое значение.

getMaxAge(): возвращает время хранения кук.

getName(): возвращает ключ кук.

getValue(): возвращает значение кук.



СЕССИИ
Сессия позоляет сохранять некоторую информацию на время сеанса. Когда клиент обращается к сервлету или странице JSP,
то движок сервлетов проверяет, определен ли в запросе параметр ID сессии. Если такой параметр неопределен (например,
клиент первый раз обращается к приложению), тогда движок сервлетов создает уникальное значение ID и связанный с ним
объект сессии. Объект сессии сохраняется на сервере, а ID оправляется в ответе клиенту и по умолчанию сохраняется на
клиенте в куках. Затем когда приходит новый запрос от того же клиента, то движок сервлетов опять же может получить ID и
сопоставить его с объектом сессии на веб-сервере.

Хотя по умолчанию ID сессии хранится в куках, но возможна ситуация, когда куки отключены на клиенте. Для решения этой
проблемы есть ряд техник, в частности, добавление ID в адрес.

Для получения объекта сессии в сервлете у объекта HttpServletRequest определен метод getSession(). Он возвращает объект
HttpSession.

Для управления сессией объект HttpSession предоставляет ряд методов:

setAttribute(String name, Object o): сохраняет в сессии под ключом name

getAttribute(String name): возвращает из сессии объект с ключом name. Если ключа name в сессии неопределено,
то возвращается null

removeAttribute(String name): удаляет из сессии объект с ключом name

Дополнительные методы HttpSession
Кроме выше рассмотренных методов HttpSession есть еще ряд методов, которые могут быть полезны. Некоторые из них:

getAttributeNames(): возвращает объект java.util.Enumeration, который содержит все ключи имеющих в сессии объектов

getId(): возвращает идентификатор сессии в виде строки

isNew(): возвращает true, если для клиента еще не установлена сессия (клиент сделал первый запрос или на клиенте
отключены куки)

setMaxInactiveInterval(int seconds): устанавливает интервал неактивности в секундах. И если в течение этого интервала
клиент был неактивен, то данные сессии данные удаляются. По умолчанию максимальный интервал неактивности 1800 секунд.
Значение -1 указывает, что сессия удаляется только тогда, когда пользователь закрыл вкладку в браузере.

invalidate(): удаляет из сессии все объекты

// получение всех ключей
Enumeration keys = session.getAttributeNames();
while(keys.hasMoreElements()){
	System.out.println((String) keys.nextElement());
}

// установка интервала неактивности
session.setMaxInactiveInterval(60*60*24);	// 1 день
session.setMaxInactiveInterval(-1);	// до закрытия браузера

// удаление всех данных из сессии
session.invalidate();

Сессия создается на стороне сервера с целью хранения информации посещения. Сессия может использовать куки
если они разрешены на стороне клиента.
